PROBLEM :: The Celebrity Problem
Difficulty: MediumAccuracy: 38.33%Submissions: 249K+Points: 4
A celebrity is a person who is known to all but does not know anyone at a party. A party is being organized by some people.  A square matrix mat is used to represent people at the party such that if an element of row i and column j is set to 1 it means ith person knows jth person. You need to return the index of the celebrity in the party, if the celebrity does not exist, return -1.

Note: Follow 0-based indexing.

TIME COMPLEXITY :: O(N^2)
SPACE COMPLEXITY :: O(N^2)

Code :: // Approach 1 using stack
class Solution 
{ 
    private:
    bool knows(vector<vector<int> >& M, int a , int b,int n){
        if(M[a][b]==1)
        return 1;
        return 0;
    }
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    { stack<int>s;
        for(int i=0;i<n;i++){
            s.push(i);
        }
        while(s.size()>1){
            int a=s.top();
            s.pop();
            int b=s.top();
            s.pop();
            if(knows(M,a,b,n)){
                s.push(b);
            }
            else{
                s.push(a);
            }
            
        }
        
        //check whether the last element in the stack is celebrity
        int ans=s.top();
        for(int i=0;i<n;i++){
            if(M[ans][i]==0){
                continue;
            }else
             return -1;
        }
        int colcount=0;
        for(int j=0;j<n;j++){
            if(M[j][ans]==1)
            colcount++;
        }
        if(colcount==n-1)
           return ans;
         return -1;  
    }
};



// Approach 2 USING MAP
// User function template for C++

class Solution {
  public:
    // Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& mat) {
        unordered_map<int,vector<int>>m;
       for(int i=0 ; i<mat.size() ; i++){
           for(int j=0 ; j<mat[0].size() ;j++){
               if(mat[i][j]){
                   m[i].push_back(j);
               }
           }
       }
       // 0 -> 1
       // 2 -> 1
      if(m.size() == mat.size() or m.size()<mat.size()-1)return -1;
      int k = -1;
      for(int i=0 ; i<mat.size(); i++){
          if(m.find(i)==m.end()){
              if(k==-1)k = i;
              else return -1;
          }
      }
      for(auto i:m){
          vector<int>vec = i.second;
          auto it = find(vec.begin(), vec.end(), k);
          if(it==vec.end())return -1;
      }
      return k;
    }
};
