
Problem :: Merge two sorted linked lists
Given the head of two sorted linked lists consisting of nodes respectively. The task is to merge both lists and return the head of the sorted merged list.

Time Complexity :: O(N)
Space Complexity :: O(1)


Code :: 

class Solution {
  public:
    Node* sortedMerge(Node* head1, Node* head2) {
        
         if (!head1) return head2;
        if (!head2) return head1;
    
        Node* temp = nullptr;
    
        // Start with the smaller node between head1 and head2
        if (head1->data < head2->data) {
            temp = head1;
            head1 = head1->next;
        } else {
            temp = head2;
            head2 = head2->next;
        }
    
        Node* result = temp;  // The head of the merged list
    
        // Merge the two lists
        while (head1 && head2) {
            if (head1->data <= head2->data) {
                temp->next = head1;
                head1 = head1->next;
            } else {
                temp->next = head2;
                head2 = head2->next;
            }
            temp = temp->next;  // Move temp to the next node
        }
    
        // If any nodes are left in either list, link them
        if (head1) {
            temp->next = head1;
        } else {
            temp->next = head2;
        }
    
        return result;
        
    }
};
