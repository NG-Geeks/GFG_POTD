Problem :: Combination Sum II

Given an array of integers arr, the length of the array n, and an integer k, find all the unique combinations in arr where the sum of the combination is equal to k. Each number can only be used once in a combination.
Return the combinations in the lexicographically sorted order, where each combination is in non-decreasing order.

Time Complexity :: O(2^n)
Space Complexity :: O(2^n)


Code::
class Solution{
     vector<vector<int>>v;
    void solve(vector<int>& nums, int target, int index, vector<int>& list) {
        // Base case: if target is achieved
        if (target == 0) {
            v.push_back(list); // Add current combination to result
            return;
        }
        
        // Base case: if index exceeds array bounds or target is less than current element
        if (index == nums.size() || target < nums[index]) {
            return;
        }
        
        int temp = nums[index];
        list.push_back(nums[index]); // Choose current element
        solve(nums, target - nums[index], index + 1, list); // Recur with reduced target and move to next index
        list.pop_back(); // Backtrack: remove last element
        
        int i = 1;
        while (index + i < nums.size() && nums[index + i] == temp) {
            i++; // Skip duplicates
        }
        solve(nums, target, index + i, list); // Recur without choosing current element
        return;
    }

public:
    vector<vector<int>> CombinationSum2(vector<int> arr,int n,int k)
    {
        vector<int>ans;
     sort(begin(arr), end(arr));
     solve(arr, k ,0 , ans);
   
     return v;
    }
};
