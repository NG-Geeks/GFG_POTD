Problem :: Path With Minimum Effort
You are a hiker preparing for an upcoming hike. You are given heights[][], a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find the route with minimum effort.

Note: A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Time Complexity :; O(row * column)
Space Complexity :: O(row * column)

Code :: 
#define p pair<int,pair<int,int>> 
class Solution {
  public:
    int MinimumEffort(int rows, int columns, vector<vector<int>> &heights) {
        priority_queue<p , vector<p> , greater<p>>pq;
       vector<vector<int>>dist(rows , vector<int>(columns , 1e9+7));
       pq.push({0,{0,0}});
        int dr[] = {-1 , 0 , 1 , 0};
        int dc[] = {0 , 1 , 0 , -1};
       while(!pq.empty()){
           auto it = pq.top();
           pq.pop();
           int diff = it.first;
           int row  = it.second.first;
           int col = it.second.second;
           if(row == rows -1 && col == columns-1)return diff;
           for(int i=0 ; i<4 ;i++){
               int newr = row + dr[i];
               int newc = col + dc[i];
               if(newr>=0 && newr<rows && newc>=0 && newc<columns){
                   int newef = max(diff , abs(heights[row][col] - heights[newr][newc]));
                   if(newef<dist[newr][newc]){
                       dist[newr][newc] = newef;
                       pq.push({newef , {newr , newc}});
                   }
               }
           }
       }
       return 0;
    }
};
